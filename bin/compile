#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e
#set -x
unset GIT_DIR

function message {
  echo "$1"
  sync
}

# https://devcenter.heroku.com/articles/buildpack-api
export_env_dir() {
  env_dir=$1
  message "-----> ENV_DIR is $env_dir"
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      message "-----> ENV_DIR contains file $e"
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir "$3"

mkdir -p "$1" "$2"
BUILD_DIR=$(cd "$1/" && pwd)
CACHE_DIR=$(cd "$2/" && pwd)

# this variable is used by pub to determine the package install location
PUB_CACHE="/app/pub-cache"
export PUB_CACHE
mkdir -p $PUB_CACHE

MACHINE=`uname -a`
message "-----> Welcome, this machine is: $MACHINE"

if [ -z "$DART_SDK_URL" ]; then
    message "ERROR: you must specify DART_SDK_URL to a Dart SDK for Linux. See README for this buildpack."
    exit 1
fi

cd $BUILD_DIR

message "-----> Installing Dart VM via URL $DART_SDK_URL"









cd $CACHE_DIR


message "just gonna directly install this particular flutter sdk"
curl -L -k https://storage.googleapis.com/flutter_infra/releases/dev/linux/flutter_linux_v1.14.4-dev.tar.xz -o - | tar xJf -
message "lets hope that worked"


cp -r $CACHE_DIR/flutter/bin $BUILD_DIR
cp -r $CACHE_DIR/flutter/bin /app










#  ====================================================================================================================================================================================
# cd $CACHE_DIR

# case "${DART_SDK_URL: -3}" in
#   tar)
#     message "SDK: tarball detected"
#     curl -L -k $DART_SDK_URL -o - | tar xzf -
#     ;;
#   zip)
#     message "SDK: zip detected"
#     curl -L -k $DART_SDK_URL > dart-sdk.zip ; unzip -o -q dart-sdk.zip
#     ;;
#   deb)
#     message "SDK: deb detected"
#     # TODO
#     message "Please use the .zip Dart SDK"
#     ;;
#   *)
#     message "Invalid Dart SDK URL" #kill after this or keep going in case SDK is there from last push?
#     ;;
# esac

# message "-----> Copy Dart binaries to app root"
# cp -r $CACHE_DIR/dart-sdk $BUILD_DIR

# we need to copy the sdk into the /app folder in order for the sdk libraries
# to be referenced correctly
# reason being that the /tmp folder will be deleted after build, and /app
# resembles the location of the ready built app
# cp -r $CACHE_DIR/dart-sdk /app

# DART_BIN=`ls -l /app/dart-sdk/bin/dart`
# message "-----> Dart cmd found at $DART_BIN"

# CAN_DART_RUN=`/app/dart-sdk/bin/dart --version`
# message "-----> Dart reports version: $CAN_DART_RUN"
# ====================================================================================================================================================================================

# MAYBE REMOVE ME
message 'going to try deleting the entire CACHE_DIR'
cd ..
rm -rf $CACHE_DIR
message 'seemingly successful delete of cache_dir'

cd $BUILD_DIR

# message "just gonna directly install this particular flutter sdk"
# curl -L -k https://storage.googleapis.com/flutter_infra/releases/dev/linux/flutter_linux_v1.14.4-dev.tar.xz -o - | tar xJf -
# message "lets hope that worked"

pwd


message "exporting path now"
export PATH="$PATH:`pwd`/flutter/bin" >> ~/.bashrc
message "hopefully that worked"

message 'going to delete the examples folder'
rm -rf flutter/examples
message 'deleted flutter/examples folder'

message 'going to delete the dev folder'
rm -rf flutter/dev
message 'deleted flutter/dev folder'

message 'going to delete the .pub_cache folder'
rm -rf flutter/.pub_cache
message 'deleted flutter/.pub_cache folder'

message 'going to delete the flutter/bin/cache/pkg folder'
rm -rf flutter/bin/cache/pkg
message 'deleted flutter/bin/cache/pkg folder'

message 'going to delete the flutter/bin/cache/artifacts folder'
rm -rf flutter/bin/cache/artifacts
message 'deleted flutter/bin/cache/artifacts folder'

message "enabling flutter web here"
flutter config --enable-web
message "assuming that flutter config --enable-web worked out"

#cd flutter
#for entry in *
#do
#  echo "$entry"
#done

for filename in `find . -name pubspec.yaml | grep -v dart-sdk | grep -v pub-cache`; do
    pub_dir=`dirname $filename`
    message "*** Found pubspec.yaml in $BUILD_DIR/$pub_dir"
    pwd


      for entry in *
      do
      echo "$entry"
      done

      message 'does lib exist?'
      cd /lib
      for entry in *
      do
      echo "$entry"
      done
      message 'stuff in there'

    if true
    # if [[ $pub_dir =~ "my_test_web" ]]
    then
      message 'I_Did isa within this directory name. Run our flutter pub get and such.'
      cd $BUILD_DIR/$pub_dir
      pwd

      #/app/dart-sdk/bin/flutter pub --version

      pwd
      message '\n\nlook here\n\n'





      #start pub from the /app folder to have correct symlink paths
      #/app/dart-sdk/bin/flutter pub get
      #/app/flutter/bin/flutter pub get

    


      #update PATH variable for pub-cache/bin folder
      message "*** Updating PATH with pub-cache/bin folder"

      export PATH="$PATH":"$HOME/pub-cache/bin" >> ~/.bashrc
      source ~/.bashrc


    

        if [ -d "web" ]
        then
            message "*** Running flutter pub get"
            flutter pub get
            message "*** Running flutter build web"
            if [[ -z "$DART_BUILD_CMD" ]]
            then
                pwd
                #cd ..
                #pwd
                #cd ..
                #pwd
                message "print all the entries in this folder"
                for entry in *
                do
                echo "$entry"
                done

                message 'going to delete the test folder'
                rm -rf test
                message 'deleted test folder'
                
                message 'Building with "flutter build web"'
                #/app/dart-sdk/bin/pub build
                # TODO: MAYBE ADD THIS BACK IN ================================================================================================
                # TODO: YOU ARE REMOVING FLUTTER BUILD WEB HERE!!!! BIG MISTAKE IF IT'S A MISTAKE! ============================================
                # flutter build web
                message 'web app is built!'
                
                message "====== print all the entries in this folder A 2ND TIME ======"
                for entry in *
                do
                echo "$entry"
                done
             

                message 'exporting dart path to bashrc'                
                export PATH="$PATH:`pwd`/flutter/bin/cache/dart-sdk/bin" >> ~/.bashrc
                source ~/.bashrc

                message 'path is:'
                message $PATH

              message 'time to active the webserver'
              flutter pub global activate webdev

              message 'now time to build the webdev stufff'
              # flutter pub global run webdev build
              flutter pub global run webdev build --output=web:build

                      
                message 'does dart work ----   dart --version'
                dart --version

                # message 'does dart work ----  /bin/dart --version'
                # /bin/dart --version


                pwd
            # cd build
                pwd
            # cd web
            ### MIGHT NEED TO REMOVE ME
                break
            else
                message "Building with \"$DART_BUILD_CMD\""
                eval $DART_BUILD_CMD
            fi
        else
            message '*** Skipping pub build because "web" folder not found'
        fi

    fi


done

# I think heroku deletes all the contents of /app and replaces it with
# whatever is in $BUILD_DIR, so copy over the pub-cache. Why not put it in
# $BUILD_DIR in the first place? because we need symlinks setup correctly.
cp -R $PUB_CACHE $BUILD_DIR/pub-cache
message `ls -l $BUILD_DIR/pub-cache`
